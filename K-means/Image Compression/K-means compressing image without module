import numpy as np
import random
import matplotlib.pyplot as plt
import cv2


#########################################################################
#################### K-means Image Compression ##########################
#########################################################################
img = cv2.cvtColor(cv2.imread('bird_small.png'), cv2.COLOR_BGR2RGB)
img = img/255
figure1 = plt.figure(1)
plt.imshow(img)
plt.title("Original Image")

##### Reshape image to 2D matrix
X = img.reshape(img.shape[0]*img.shape[1], 3)

##### 4 clusters (colors)
K = 4

def FindLabelsBelongTo(X, Centroids):
    Labels = np.empty([X.shape[0], 1])
    distance_to_its_centroid = np.empty([X.shape[0], 1])
    for i in range(X.shape[0]):
        current_min_distance = 10**10
        for j in range(Centroids.shape[0]):
            norm = np.sqrt( (X[i, :].reshape(-1, 1) - Centroids[j, :].reshape(-1, 1)).T @ (X[i, :].reshape(-1, 1) - Centroids[j, :].reshape(-1, 1)) )
            if norm < current_min_distance:
                current_min_distance = norm
                Labels[i, 0] = j
                distance_to_its_centroid[i, 0] = current_min_distance
            else:
                continue
    return [Labels, distance_to_its_centroid]


def ComputeCentroids(X, Labels):
    Centroids = np.empty([K, X.shape[1]])
    for i in range(Centroids.shape[0]):
        Centroids[i, :] = X[np.where(Labels == i)[0], :].mean(axis=0)
    return Centroids


def KMeans(X, Initial_Centroids, iter_max):
    iter = 0
    Centroids = Initial_Centroids
    total_distance_history = []
    while True:
        Centroids_Old = Centroids
        Labels = FindLabelsBelongTo(X, Centroids)[0]
        total_distance_history.append(sum(FindLabelsBelongTo(X, Centroids)[1]).item())
        Centroids = ComputeCentroids(X, Labels)
        Centroids_New = Centroids
        iter += 1

        if (Centroids_Old == Centroids_New).all() or iter == iter_max:
            break

    return [Labels, Centroids, iter, total_distance_history]


##### Pick 10 times, each time randomly pick K points from data set as initial centroids
##### Set the initial centroids as the set with smallest total distance
def FindInitialCentroids(X, K):
    current_min_total_distance = 10**10
    initial_centroids = np.empty([K, X.shape[1]])
    for i in range(11):
        random_index = random.sample(range(X.shape[0]), K)
        X_filtered = X[random_index, :]
        total_distance = sum(FindLabelsBelongTo(X, Centroids=X_filtered)[1])
        if sum(total_distance) < current_min_total_distance:
            current_min_total_distance = total_distance
            initial_centroids = X_filtered
    return initial_centroids

initial_centroids = FindInitialCentroids(X, K)
print("Initial centroids: \n", initial_centroids)
"""##### Standardize initial centroids
for i in range(initial_centroids.shape[1]):
    initial_centroids[:, i] = (initial_centroids[:, i] - miu[:, i]) / sigma[:, i]"""


[labels, centroids, iter, total_distance_history] = KMeans(X, initial_centroids, iter_max = 10000)
print("Epochs to converge: ", iter)
print("Centroids: \n", centroids)
print("Total distance in epochs: \n", total_distance_history)
print("Labels: \n", labels.reshape(1, -1))
figure2 = plt.figure(2)
plt.plot(total_distance_history)
plt.title("Total distance in epochs")
plt.xlabel("Epochs")
plt.ylabel("Total distance to corresponding centroid")

##### Replace X values bu corresponding centroids
for i in range(X.shape[0]):
    X[i, :] = centroids[int(labels[i,0]), :]

##### Reshpae X to 3D
img_reduced = X.reshape(img.shape[0], img.shape[1], 3)
figure3 = plt.figure(3)
plt.imshow(img_reduced)
plt.title(r"Compressed Image (from $255^3$ colors to 4)")

##### Save image
##### *255 to scale back (python ignores scaling, but the png file can't)
##### set last dimension to ::-1 to reverse the order, since we want RGB to BGR
cv2.imwrite('bird_small_copy.png', 255*img_reduced[:, :, ::-1])

plt.show()
