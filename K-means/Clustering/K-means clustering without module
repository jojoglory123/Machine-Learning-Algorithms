import numpy as np
import random
import matplotlib.pyplot as plt

#########################################################################
######################## K-means Clustering #############################
#########################################################################
##### separate data as input and output
X = np.loadtxt("ex7data2 _alt.csv", delimiter=',')
plot1 = plt.figure(1)
plt.scatter(X[:, 0], X[:, 1])
plt.title("Scatter plot of training data")


##### Standardize data
"""miu = X.mean(axis=0).reshape(1, -1)
sigma = X.std(axis=0).reshape(1, -1)
for i in range(X.shape[1]):
    X[:, i] = ( X[:, i] - miu[:, i] ) / sigma[:, i]"""

##### 3 clusters
K = 4

def FindLabelsBelongTo(X, Centroids):
    Labels = np.empty([X.shape[0], 1])
    distance_to_its_centroid = np.empty([X.shape[0], 1])
    for i in range(X.shape[0]):
        current_min_distance = 10**10
        for j in range(Centroids.shape[0]):
            norm = np.sqrt( (X[i, :].reshape(-1, 1) - Centroids[j, :].reshape(-1, 1)).T @ (X[i, :].reshape(-1, 1) - Centroids[j, :].reshape(-1, 1)) )
            if norm < current_min_distance:
                current_min_distance = norm
                Labels[i, 0] = j
                distance_to_its_centroid[i, 0] = current_min_distance
            else:
                continue
    return [Labels, distance_to_its_centroid]


def ComputeCentroids(X, Labels):
    Centroids = np.empty([K, X.shape[1]])
    for i in range(Centroids.shape[0]):
        Centroids[i, :] = X[np.where(Labels == i)[0], :].mean(axis=0)
    return Centroids


def KMeans(X, Initial_Centroids, iter_max):
    iter = 0
    Centroids = Initial_Centroids
    total_distance_history = []
    while True:
        Centroids_Old = Centroids
        Labels = FindLabelsBelongTo(X, Centroids)[0]
        total_distance_history.append(sum(FindLabelsBelongTo(X, Centroids)[1]).item())
        Centroids = ComputeCentroids(X, Labels)
        Centroids_New = Centroids
        iter += 1

        if (Centroids_Old == Centroids_New).all() or iter == iter_max:
            break

    return [Labels, Centroids, iter, total_distance_history]


##### Pick 10 times, each time randomly pick K points from data set as initial centroids
##### Set the initial centroids as the set with smallest total distance
def FindInitialCentroids(X, K):
    current_min_total_distance = 10**10
    initial_centroids = np.empty([K, X.shape[1]])
    for i in range(11):
        random_index = random.sample(range(X.shape[0]), K)
        X_filtered = X[random_index, :]
        total_distance = sum(FindLabelsBelongTo(X, Centroids=X_filtered)[1])
        if sum(total_distance) < current_min_total_distance:
            current_min_total_distance = total_distance
            initial_centroids = X_filtered
    return initial_centroids

initial_centroids = FindInitialCentroids(X, K)
print("Initial centroids: \n", initial_centroids)
"""##### Standardize initial centroids
for i in range(initial_centroids.shape[1]):
    initial_centroids[:, i] = (initial_centroids[:, i] - miu[:, i]) / sigma[:, i]"""


[labels, centroids, iter, total_distance_history] = KMeans(X, initial_centroids, iter_max = 10000)
print("Epochs to converge: ", iter)
print("Centroids: \n", centroids)
print("Total distance in epochs: \n", total_distance_history)
print("Labels: \n", labels.reshape(1, -1))
plot2 = plt.figure(2)
plt.plot(total_distance_history)
plt.title("Total distance in epochs")
plt.xlabel("Epochs")
plt.ylabel("Total distance to corresponding centroid")

##### Plot
plot3 = plt.figure(3)
for i in range(initial_centroids.shape[0]):
    color = ["red", "green", "blue", "black", "cyan", "magenta", "yellow"]
    X_filtered = X[np.where(labels == i)[0], :]
    plt.scatter(X_filtered[:, 0], X_filtered[:, 1], color=color[i])
plt.title("Classified data")


##### Predict
coord1 = round(random.uniform(np.amin(X[:, 0]), np.amax(X[:, 0])), 2)
coord2 = round(random.uniform(np.amin(X[:, 1]), np.amax(X[:, 1])), 2)
test = np.array( [ [coord1, coord2] ] )
def Predict(test):
    color = ["red", "green", "blue", "black", "cyan", "magenta", "yellow"]
    Label_Predict = 0
    current_min_distance = 10**10
    for i in range(centroids.shape[0]):
        norm = np.sqrt( (centroids[i, :].reshape(-1, 1) - test[0, :].reshape(-1, 1)).T @ (centroids[i, :].reshape(-1, 1) - test[0, :].reshape(-1, 1)) )
        if norm < current_min_distance:
            current_min_distance = norm
            Label_Predict = i
            Cluster_Color = color[i]
    return [Label_Predict, Cluster_Color]

[label_predict, cluster_color] = Predict(test)
print("For a test data X = (", test[0, 0], ",", test[0, 1], "), predicted label =", label_predict, ", which is the", cluster_color, "color.")

plt.show()
